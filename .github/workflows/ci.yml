name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "Clearing npm cache and setting registry..."
        npm cache clean --force
        npm config set registry https://registry.npmjs.org/
        echo "Registry set to: $(npm config get registry)"
        echo "Installing dependencies with npm ci..."
        npm ci --verbose || {
          echo "npm ci failed, trying npm install..."
          npm install --verbose
        }
        echo "Checking if jest is installed:"
        npx jest --version || echo "Jest not found in npx"
        echo "Checking if supertest is installed:"
        npx supertest --version || echo "Supertest not found in npx"
        echo "Checking node_modules:"
        ls -la node_modules/.bin/ | grep -E "(jest|supertest)" || echo "Test binaries not found"
        echo "Checking supertest module:"
        ls -la node_modules/supertest/ || echo "Supertest module not found"
        echo "All installed packages:"
        npm list --depth=0
      
    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Available memory: $(free -h)"
        echo "Disk space: $(df -h)"
        echo "Current directory: $(pwd)"
        echo "Files in project:"
        ls -la
        echo "Test files:"
        find . -name "*.test.js" -type f
        echo "Jest config:"
        cat jest.config.js || echo "No jest.config.js found"
        
    - name: Run linter
      run: npm run lint || echo "No lint script found, skipping..."
      continue-on-error: true
      
    - name: Run tests
      run: |
        echo "Running tests with debug info..."
        echo "Current working directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Test files found:"
        find . -name "*.test.js" -type f
        echo "Running jest with full output..."
        echo "First, let's try a simple jest test:"
        npx jest --version
        echo "Now running the actual tests:"
        npx jest --verbose --detectOpenHandles --forceExit --no-cache --runInBand
      env:
        NODE_ENV: test
        
    - name: Generate coverage report
      run: npx jest --coverage --forceExit --no-cache --runInBand
      env:
        NODE_ENV: test
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Build application
      run: |
        echo "Application built successfully"
        echo "Files to be deployed:"
        ls -la
        
    - name: Test production build
      run: |
        timeout 10s npm start &
        sleep 5
        curl -f http://localhost:61080/health || exit 1
        pkill -f "node server.js" || true
